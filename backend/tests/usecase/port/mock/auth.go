// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/port/auth.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	entity "github.com/faciam_dev/twitter_block2mute/backend/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthInputPort is a mock of AuthInputPort interface.
type MockAuthInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockAuthInputPortMockRecorder
}

// MockAuthInputPortMockRecorder is the mock recorder for MockAuthInputPort.
type MockAuthInputPortMockRecorder struct {
	mock *MockAuthInputPort
}

// NewMockAuthInputPort creates a new mock instance.
func NewMockAuthInputPort(ctrl *gomock.Controller) *MockAuthInputPort {
	mock := &MockAuthInputPort{ctrl: ctrl}
	mock.recorder = &MockAuthInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthInputPort) EXPECT() *MockAuthInputPortMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthInputPort) Auth() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Auth")
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthInputPortMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthInputPort)(nil).Auth))
}

// Callback mocks base method.
func (m *MockAuthInputPort) Callback(token, secret, twitterID, twitterName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Callback", token, secret, twitterID, twitterName)
}

// Callback indicates an expected call of Callback.
func (mr *MockAuthInputPortMockRecorder) Callback(token, secret, twitterID, twitterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockAuthInputPort)(nil).Callback), token, secret, twitterID, twitterName)
}

// IsAuthenticated mocks base method.
func (m *MockAuthInputPort) IsAuthenticated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsAuthenticated")
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockAuthInputPortMockRecorder) IsAuthenticated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockAuthInputPort)(nil).IsAuthenticated))
}

// Logout mocks base method.
func (m *MockAuthInputPort) Logout() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout")
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthInputPortMockRecorder) Logout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthInputPort)(nil).Logout))
}

// MockAuthOutputPort is a mock of AuthOutputPort interface.
type MockAuthOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockAuthOutputPortMockRecorder
}

// MockAuthOutputPortMockRecorder is the mock recorder for MockAuthOutputPort.
type MockAuthOutputPortMockRecorder struct {
	mock *MockAuthOutputPort
}

// NewMockAuthOutputPort creates a new mock instance.
func NewMockAuthOutputPort(ctrl *gomock.Controller) *MockAuthOutputPort {
	mock := &MockAuthOutputPort{ctrl: ctrl}
	mock.recorder = &MockAuthOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthOutputPort) EXPECT() *MockAuthOutputPortMockRecorder {
	return m.recorder
}

// RenderAuth mocks base method.
func (m *MockAuthOutputPort) RenderAuth(arg0 *entity.Auth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderAuth", arg0)
}

// RenderAuth indicates an expected call of RenderAuth.
func (mr *MockAuthOutputPortMockRecorder) RenderAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderAuth", reflect.TypeOf((*MockAuthOutputPort)(nil).RenderAuth), arg0)
}

// RenderCallback mocks base method.
func (m *MockAuthOutputPort) RenderCallback(arg0 *entity.Auth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderCallback", arg0)
}

// RenderCallback indicates an expected call of RenderCallback.
func (mr *MockAuthOutputPortMockRecorder) RenderCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderCallback", reflect.TypeOf((*MockAuthOutputPort)(nil).RenderCallback), arg0)
}

// RenderError mocks base method.
func (m *MockAuthOutputPort) RenderError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", arg0)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockAuthOutputPortMockRecorder) RenderError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockAuthOutputPort)(nil).RenderError), arg0)
}

// RenderIsAuth mocks base method.
func (m *MockAuthOutputPort) RenderIsAuth(arg0 *entity.Auth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderIsAuth", arg0)
}

// RenderIsAuth indicates an expected call of RenderIsAuth.
func (mr *MockAuthOutputPortMockRecorder) RenderIsAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderIsAuth", reflect.TypeOf((*MockAuthOutputPort)(nil).RenderIsAuth), arg0)
}

// RenderLogout mocks base method.
func (m *MockAuthOutputPort) RenderLogout(arg0 *entity.Auth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderLogout", arg0)
}

// RenderLogout indicates an expected call of RenderLogout.
func (mr *MockAuthOutputPortMockRecorder) RenderLogout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderLogout", reflect.TypeOf((*MockAuthOutputPort)(nil).RenderLogout), arg0)
}

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthRepository) Auth() (*entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(*entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthRepositoryMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthRepository)(nil).Auth))
}

// Callback mocks base method.
func (m *MockAuthRepository) Callback(token, secret, twitterID, twitterName string) (*entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", token, secret, twitterID, twitterName)
	ret0, _ := ret[0].(*entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Callback indicates an expected call of Callback.
func (mr *MockAuthRepositoryMockRecorder) Callback(token, secret, twitterID, twitterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockAuthRepository)(nil).Callback), token, secret, twitterID, twitterName)
}

// IsAuthenticated mocks base method.
func (m *MockAuthRepository) IsAuthenticated() (*entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated")
	ret0, _ := ret[0].(*entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockAuthRepositoryMockRecorder) IsAuthenticated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockAuthRepository)(nil).IsAuthenticated))
}

// Logout mocks base method.
func (m *MockAuthRepository) Logout() (*entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout")
	ret0, _ := ret[0].(*entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthRepositoryMockRecorder) Logout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthRepository)(nil).Logout))
}
