// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/port/block2mute.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	entity "github.com/faciam_dev/twitter_block2mute/backend/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBlock2MuteInputPort is a mock of Block2MuteInputPort interface.
type MockBlock2MuteInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockBlock2MuteInputPortMockRecorder
}

// MockBlock2MuteInputPortMockRecorder is the mock recorder for MockBlock2MuteInputPort.
type MockBlock2MuteInputPortMockRecorder struct {
	mock *MockBlock2MuteInputPort
}

// NewMockBlock2MuteInputPort creates a new mock instance.
func NewMockBlock2MuteInputPort(ctrl *gomock.Controller) *MockBlock2MuteInputPort {
	mock := &MockBlock2MuteInputPort{ctrl: ctrl}
	mock.recorder = &MockBlock2MuteInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock2MuteInputPort) EXPECT() *MockBlock2MuteInputPortMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBlock2MuteInputPort) All(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "All", userID)
}

// All indicates an expected call of All.
func (mr *MockBlock2MuteInputPortMockRecorder) All(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBlock2MuteInputPort)(nil).All), userID)
}

// MockBlock2MuteOutputPort is a mock of Block2MuteOutputPort interface.
type MockBlock2MuteOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockBlock2MuteOutputPortMockRecorder
}

// MockBlock2MuteOutputPortMockRecorder is the mock recorder for MockBlock2MuteOutputPort.
type MockBlock2MuteOutputPortMockRecorder struct {
	mock *MockBlock2MuteOutputPort
}

// NewMockBlock2MuteOutputPort creates a new mock instance.
func NewMockBlock2MuteOutputPort(ctrl *gomock.Controller) *MockBlock2MuteOutputPort {
	mock := &MockBlock2MuteOutputPort{ctrl: ctrl}
	mock.recorder = &MockBlock2MuteOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock2MuteOutputPort) EXPECT() *MockBlock2MuteOutputPortMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockBlock2MuteOutputPort) Render(arg0 *entity.Block2Mute) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0)
}

// Render indicates an expected call of Render.
func (mr *MockBlock2MuteOutputPortMockRecorder) Render(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockBlock2MuteOutputPort)(nil).Render), arg0)
}

// RenderError mocks base method.
func (m *MockBlock2MuteOutputPort) RenderError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", arg0)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockBlock2MuteOutputPortMockRecorder) RenderError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockBlock2MuteOutputPort)(nil).RenderError), arg0)
}

// RenderNotFound mocks base method.
func (m *MockBlock2MuteOutputPort) RenderNotFound() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderNotFound")
}

// RenderNotFound indicates an expected call of RenderNotFound.
func (mr *MockBlock2MuteOutputPortMockRecorder) RenderNotFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderNotFound", reflect.TypeOf((*MockBlock2MuteOutputPort)(nil).RenderNotFound))
}

// MockBlock2MuteRepository is a mock of Block2MuteRepository interface.
type MockBlock2MuteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlock2MuteRepositoryMockRecorder
}

// MockBlock2MuteRepositoryMockRecorder is the mock recorder for MockBlock2MuteRepository.
type MockBlock2MuteRepositoryMockRecorder struct {
	mock *MockBlock2MuteRepository
}

// NewMockBlock2MuteRepository creates a new mock instance.
func NewMockBlock2MuteRepository(ctrl *gomock.Controller) *MockBlock2MuteRepository {
	mock := &MockBlock2MuteRepository{ctrl: ctrl}
	mock.recorder = &MockBlock2MuteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock2MuteRepository) EXPECT() *MockBlock2MuteRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBlock2MuteRepository) All(user *entity.User) (*entity.Block2Mute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", user)
	ret0, _ := ret[0].(*entity.Block2Mute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBlock2MuteRepositoryMockRecorder) All(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBlock2MuteRepository)(nil).All), user)
}

// AuthTwitter mocks base method.
func (m *MockBlock2MuteRepository) AuthTwitter() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTwitter")
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthTwitter indicates an expected call of AuthTwitter.
func (mr *MockBlock2MuteRepositoryMockRecorder) AuthTwitter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTwitter", reflect.TypeOf((*MockBlock2MuteRepository)(nil).AuthTwitter))
}

// GetUser mocks base method.
func (m *MockBlock2MuteRepository) GetUser(userID string) *entity.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(*entity.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockBlock2MuteRepositoryMockRecorder) GetUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockBlock2MuteRepository)(nil).GetUser), userID)
}
