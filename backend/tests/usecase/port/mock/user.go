// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/port/user.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	entity "github.com/faciam_dev/twitter_block2mute/backend/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUserInputPort is a mock of UserInputPort interface.
type MockUserInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserInputPortMockRecorder
}

// MockUserInputPortMockRecorder is the mock recorder for MockUserInputPort.
type MockUserInputPortMockRecorder struct {
	mock *MockUserInputPort
}

// NewMockUserInputPort creates a new mock instance.
func NewMockUserInputPort(ctrl *gomock.Controller) *MockUserInputPort {
	mock := &MockUserInputPort{ctrl: ctrl}
	mock.recorder = &MockUserInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInputPort) EXPECT() *MockUserInputPortMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserInputPort) GetUserByID(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserByID", userID)
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserInputPortMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserInputPort)(nil).GetUserByID), userID)
}

// MockUserOutputPort is a mock of UserOutputPort interface.
type MockUserOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserOutputPortMockRecorder
}

// MockUserOutputPortMockRecorder is the mock recorder for MockUserOutputPort.
type MockUserOutputPortMockRecorder struct {
	mock *MockUserOutputPort
}

// NewMockUserOutputPort creates a new mock instance.
func NewMockUserOutputPort(ctrl *gomock.Controller) *MockUserOutputPort {
	mock := &MockUserOutputPort{ctrl: ctrl}
	mock.recorder = &MockUserOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserOutputPort) EXPECT() *MockUserOutputPortMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockUserOutputPort) Render(arg0 *entity.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0)
}

// Render indicates an expected call of Render.
func (mr *MockUserOutputPortMockRecorder) Render(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockUserOutputPort)(nil).Render), arg0)
}

// RenderError mocks base method.
func (m *MockUserOutputPort) RenderError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", arg0)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockUserOutputPortMockRecorder) RenderError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockUserOutputPort)(nil).RenderError), arg0)
}

// RenderNotFound mocks base method.
func (m *MockUserOutputPort) RenderNotFound() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderNotFound")
}

// RenderNotFound indicates an expected call of RenderNotFound.
func (mr *MockUserOutputPortMockRecorder) RenderNotFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderNotFound", reflect.TypeOf((*MockUserOutputPort)(nil).RenderNotFound))
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(userID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), userID)
}
