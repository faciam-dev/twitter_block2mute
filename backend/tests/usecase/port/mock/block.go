// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/port/block.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	entity "github.com/faciam_dev/twitter_block2mute/backend/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockInputPort is a mock of BlockInputPort interface.
type MockBlockInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockBlockInputPortMockRecorder
}

// MockBlockInputPortMockRecorder is the mock recorder for MockBlockInputPort.
type MockBlockInputPortMockRecorder struct {
	mock *MockBlockInputPort
}

// NewMockBlockInputPort creates a new mock instance.
func NewMockBlockInputPort(ctrl *gomock.Controller) *MockBlockInputPort {
	mock := &MockBlockInputPort{ctrl: ctrl}
	mock.recorder = &MockBlockInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockInputPort) EXPECT() *MockBlockInputPortMockRecorder {
	return m.recorder
}

// GetUserIDs mocks base method.
func (m *MockBlockInputPort) GetUserIDs(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserIDs", userID)
}

// GetUserIDs indicates an expected call of GetUserIDs.
func (mr *MockBlockInputPortMockRecorder) GetUserIDs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDs", reflect.TypeOf((*MockBlockInputPort)(nil).GetUserIDs), userID)
}

// MockBlockOutputPort is a mock of BlockOutputPort interface.
type MockBlockOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockBlockOutputPortMockRecorder
}

// MockBlockOutputPortMockRecorder is the mock recorder for MockBlockOutputPort.
type MockBlockOutputPortMockRecorder struct {
	mock *MockBlockOutputPort
}

// NewMockBlockOutputPort creates a new mock instance.
func NewMockBlockOutputPort(ctrl *gomock.Controller) *MockBlockOutputPort {
	mock := &MockBlockOutputPort{ctrl: ctrl}
	mock.recorder = &MockBlockOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockOutputPort) EXPECT() *MockBlockOutputPortMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockBlockOutputPort) Render(arg0 *[]entity.Block, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0, arg1)
}

// Render indicates an expected call of Render.
func (mr *MockBlockOutputPortMockRecorder) Render(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockBlockOutputPort)(nil).Render), arg0, arg1)
}

// RenderError mocks base method.
func (m *MockBlockOutputPort) RenderError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", arg0)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockBlockOutputPortMockRecorder) RenderError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockBlockOutputPort)(nil).RenderError), arg0)
}

// RenderNotFound mocks base method.
func (m *MockBlockOutputPort) RenderNotFound() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderNotFound")
}

// RenderNotFound indicates an expected call of RenderNotFound.
func (mr *MockBlockOutputPortMockRecorder) RenderNotFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderNotFound", reflect.TypeOf((*MockBlockOutputPort)(nil).RenderNotFound))
}

// MockBlockRepository is a mock of BlockRepository interface.
type MockBlockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepositoryMockRecorder
}

// MockBlockRepositoryMockRecorder is the mock recorder for MockBlockRepository.
type MockBlockRepositoryMockRecorder struct {
	mock *MockBlockRepository
}

// NewMockBlockRepository creates a new mock instance.
func NewMockBlockRepository(ctrl *gomock.Controller) *MockBlockRepository {
	mock := &MockBlockRepository{ctrl: ctrl}
	mock.recorder = &MockBlockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepository) EXPECT() *MockBlockRepositoryMockRecorder {
	return m.recorder
}

// GetUserIDs mocks base method.
func (m *MockBlockRepository) GetUserIDs(userID string) (*[]entity.Block, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDs", userID)
	ret0, _ := ret[0].(*[]entity.Block)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserIDs indicates an expected call of GetUserIDs.
func (mr *MockBlockRepositoryMockRecorder) GetUserIDs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDs", reflect.TypeOf((*MockBlockRepository)(nil).GetUserIDs), userID)
}
