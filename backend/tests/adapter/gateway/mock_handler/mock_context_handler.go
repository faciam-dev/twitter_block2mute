// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/gateway/handler/context_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContextHandler is a mock of ContextHandler interface.
type MockContextHandler struct {
	ctrl     *gomock.Controller
	recorder *MockContextHandlerMockRecorder
}

// MockContextHandlerMockRecorder is the mock recorder for MockContextHandler.
type MockContextHandlerMockRecorder struct {
	mock *MockContextHandler
}

// NewMockContextHandler creates a new mock instance.
func NewMockContextHandler(ctrl *gomock.Controller) *MockContextHandler {
	mock := &MockContextHandler{ctrl: ctrl}
	mock.recorder = &MockContextHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextHandler) EXPECT() *MockContextHandlerMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockContextHandler) GetContext() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockContextHandlerMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockContextHandler)(nil).GetContext))
}

// JSON mocks base method.
func (m *MockContextHandler) JSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, obj)
}

// JSON indicates an expected call of JSON.
func (mr *MockContextHandlerMockRecorder) JSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockContextHandler)(nil).JSON), code, obj)
}

// Param mocks base method.
func (m *MockContextHandler) Param(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockContextHandlerMockRecorder) Param(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockContextHandler)(nil).Param), key)
}

// Query mocks base method.
func (m *MockContextHandler) Query(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockContextHandlerMockRecorder) Query(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockContextHandler)(nil).Query), key)
}
