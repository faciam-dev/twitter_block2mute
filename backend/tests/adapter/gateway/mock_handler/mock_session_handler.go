// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/gateway/handler/session_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	handler "github.com/faciam_dev/twitter_block2mute/backend/adapter/gateway/handler"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionHandler is a mock of SessionHandler interface.
type MockSessionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSessionHandlerMockRecorder
}

// MockSessionHandlerMockRecorder is the mock recorder for MockSessionHandler.
type MockSessionHandlerMockRecorder struct {
	mock *MockSessionHandler
}

// NewMockSessionHandler creates a new mock instance.
func NewMockSessionHandler(ctrl *gomock.Controller) *MockSessionHandler {
	mock := &MockSessionHandler{ctrl: ctrl}
	mock.recorder = &MockSessionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionHandler) EXPECT() *MockSessionHandlerMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockSessionHandler) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockSessionHandlerMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSessionHandler)(nil).Clear))
}

// Delete mocks base method.
func (m *MockSessionHandler) Delete(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionHandlerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionHandler)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockSessionHandler) Get(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSessionHandlerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionHandler)(nil).Get), arg0)
}

// Save mocks base method.
func (m *MockSessionHandler) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSessionHandlerMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSessionHandler)(nil).Save))
}

// Set mocks base method.
func (m *MockSessionHandler) Set(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set.
func (mr *MockSessionHandlerMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSessionHandler)(nil).Set), arg0, arg1)
}

// SetContextHandler mocks base method.
func (m *MockSessionHandler) SetContextHandler(arg0 handler.ContextHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContextHandler", arg0)
}

// SetContextHandler indicates an expected call of SetContextHandler.
func (mr *MockSessionHandlerMockRecorder) SetContextHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContextHandler", reflect.TypeOf((*MockSessionHandler)(nil).SetContextHandler), arg0)
}
